{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[0]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState(props.questions.length);\n  const totalTime = 30; //props.questions.length;\n\n  const initTime = new Date();\n  initTime.setSeconds(initTime.getSeconds() + 2);\n  const [expiryTimestamp, setExpiryTimestamp] = useState(initTime);\n  const {\n    secondsPre,\n    minutesPre,\n    hoursPre,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n  const seconds1 = secondsPre.toString().padStart(\"0\", 2);\n  const minutes1 = minutesPre.toString().padStart(\"0\", 2);\n  const hours1 = hoursPre.toString().padStart(\"0\", 2);\n  const seconds = seconds1.padStart(\"0\", 2);\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === len) {\n      setIsEndScreen(true);\n    }\n  };\n\n  if (minutes === 0 && seconds === 0 && !isEndScreen) {\n    setIsEndScreen(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You got \", correctAnswers, \"/\", len, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.callBackFunction,\n        children: \"Return to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(question);\n            checkAnswer(response, question.answer, props.questions.length);\n          },\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 43\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this), \"Correct Answers: \", correctAnswers, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [minutes, \":\", seconds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"tyT1zrgDuAZiFxvaYckOHhghF30=\", false, function () {\n  return [useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","useTimer","Game","props","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","question","setQuestion","questions","isEndScreen","setIsEndScreen","len","setLen","length","totalTime","initTime","Date","setSeconds","getSeconds","expiryTimestamp","setExpiryTimestamp","secondsPre","minutesPre","hoursPre","days","isRunning","start","pause","resume","restart","onExpire","console","warn","seconds1","toString","padStart","minutes1","hours1","seconds","checkAnswer","response","answer","log","newIndex","minutes","callBackFunction","name","responses","map","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\n\nfunction Game(props) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[0]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState(props.questions.length);\n  const totalTime = 30//props.questions.length;\n  const initTime = new Date();\n  initTime.setSeconds(initTime.getSeconds() + 2);\n  const [expiryTimestamp, setExpiryTimestamp] = useState(initTime);\n\n  const {\n    secondsPre,\n    minutesPre,\n    hoursPre,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n  const seconds1 = secondsPre.toString().padStart(\"0\", 2);\n  const minutes1 = minutesPre.toString().padStart(\"0\", 2);\n  const hours1 = hoursPre.toString().padStart(\"0\", 2);\n  const seconds = seconds1.padStart(\"0\", 2)\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex+1])\n\n    \n    if (questionIndex+1 === len) {\n      setIsEndScreen(true)\n    }\n  }\n\n  if (minutes === 0 && seconds === 0 && !isEndScreen) {\n    setIsEndScreen(true);\n  }\n\n  return (\n  <div>\n    {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{len} correct.\n      <button onClick={props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, props.questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    <div>\n    {minutes}:{seconds}\n    </div>\n    </div>}\n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}