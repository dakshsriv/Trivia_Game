{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [questions, setQuestions] = useState();\n  useEffect(() => {\n    axios.get(\"localhost:3000/api/\").then(response => {\n      setQuestions(response.data);\n    });\n  });\n  useEffect(() => {}, [questions]);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === len) {\n      setIsEndScreen(true);\n    }\n  };\n\n  if (minutes === 0 && seconds === 0 && !isEndScreen) {\n    setIsEndScreen(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !props.question ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"No questions \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.callBackFunction,\n        children: \"Return to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"You got \", correctAnswers, \"/\", len, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.callBackFunction,\n          children: \"Return to home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 7\n          }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log(question);\n              checkAnswer(response, question.answer, props.questions.length);\n            },\n            children: response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 43\n          }, this))]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 5\n        }, this), \"Correct Answers: \", correctAnswers, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"QDFfM8BIztQyy4iTfns+AgYEKs8=\", false, function () {\n  return [useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["axios","React","useState","useEffect","useTimer","Game","props","questions","setQuestions","get","then","response","data","seconds","minutes","hours","days","isRunning","start","pause","resume","restart","expiryTimestamp","onExpire","console","warn","checkAnswer","answer","log","len","setCorrectAnswers","correctAnswers","newIndex","questionIndex","setQuestionIndex","setQuestion","setIsEndScreen","isEndScreen","question","callBackFunction","name","responses","map","length","id","toString","padStart"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,EAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdH,IAAAA,KAAK,CAACS,GAAN,CAAU,qBAAV,EAAiCC,IAAjC,CAAsCC,QAAQ,IAAI;AAACH,MAAAA,YAAY,CAACG,QAAQ,CAACC,IAAV,CAAZ;AAA4B,KAA/E;AACD,GAFQ,CAAT;AAIAT,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACI,SAAD,CAAX,CAAT;AAEA,QAAM;AACJM,IAAAA,OADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,KAPI;AAQJC,IAAAA,MARI;AASJC,IAAAA;AATI,MAUFjB,QAAQ,CAAC;AACXkB,IAAAA,eADW;AAEXC,IAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,IAAR,CAAa,iBAAb;AAFL,GAAD,CAVZ;;AAeA,QAAMC,WAAW,GAAG,CAACf,QAAD,EAAWgB,MAAX,KAAsB;AACxCH,IAAAA,OAAO,CAACI,GAAR,CAAYjB,QAAZ,EAAsBgB,MAAtB,EAA8BE,GAA9B;;AACA,QAAIlB,QAAQ,KAAKgB,MAAjB,EAAyB;AACvBG,MAAAA,iBAAiB,CAACC,cAAc,GAAC,CAAhB,CAAjB;AACD;;AACD,QAAIC,QAAQ,GAAGC,aAAa,GAAG,CAA/B;AACAC,IAAAA,gBAAgB,CAACF,QAAD,CAAhB;AACAG,IAAAA,WAAW,CAAC7B,KAAK,CAACC,SAAN,CAAgB0B,aAAa,GAAC,CAA9B,CAAD,CAAX;;AAGA,QAAIA,aAAa,GAAC,CAAd,KAAoBJ,GAAxB,EAA6B;AAC3BO,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAbD;;AAeA,MAAItB,OAAO,KAAK,CAAZ,IAAiBD,OAAO,KAAK,CAA7B,IAAkC,CAACwB,WAAvC,EAAoD;AAClDD,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAED,sBACA;AAAA,cACG,CAAC9B,KAAK,CAACgC,QAAP,gBAAkB;AAAA,+CAAkB;AAAQ,QAAA,OAAO,EAAEhC,KAAK,CAACiC,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAlB,gBACD;AAAA,gBACGF,WAAW,gBACd;AAAA,+BACWN,cADX,OAC4BF,GAD5B,4BAEE;AAAQ,UAAA,OAAO,EAAEvB,KAAK,CAACiC,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADc,gBAKhB;AAAA,gCACI;AAAA,kCACA;AAAA,sBAAID,QAAQ,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,kBADA,EAECF,QAAQ,CAACG,SAAT,CAAmBC,GAAnB,CAAuB/B,QAAQ,iBAAI;AAAQ,YAAA,OAAO,EAAE,MAAM;AAACa,cAAAA,OAAO,CAACI,GAAR,CAAYU,QAAZ;AAAsBZ,cAAAA,WAAW,CAACf,QAAD,EAAW2B,QAAQ,CAACX,MAApB,EAA4BrB,KAAK,CAACC,SAAN,CAAgBoC,MAA5C,CAAX;AAA+D,aAA7G;AAAA,sBAAgHhC;AAAhH;AAAA;AAAA;AAAA;AAAA,kBAAnC,CAFD;AAAA,WAAU2B,QAAQ,CAACM,EAAnB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKE;AAAA;AAAA;AAAA;AAAA,gBALF,uBAMoBb,cANpB,eAOE;AAAA,qBACEjB,OAAO,CAAC+B,QAAR,EAAD,CAAqBC,QAArB,CAA8B,CAA9B,EAAiC,GAAjC,CADD,OAC0CjC,OAAO,CAACgC,QAAR,EAAD,CAAqBC,QAArB,CAA8B,CAA9B,EAAiC,GAAjC,CADzC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AANE;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADA;AAsBD;;GAjEQzC,I;UAmBHD,Q;;;KAnBGC,I;AAmET,eAAeA,IAAf","sourcesContent":["import axios from 'axios';\nimport React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\n\nfunction Game(props) {\n  const [questions, setQuestions] = useState();\n\n  useEffect(() => {\n    axios.get(\"localhost:3000/api/\").then(response => {setQuestions(response.data)});\n  })\n\n  useEffect(() => {}, [questions])\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex+1])\n\n    \n    if (questionIndex+1 === len) {\n      setIsEndScreen(true)\n    }\n  }\n\n  if (minutes === 0 && seconds === 0 && !isEndScreen) {\n    setIsEndScreen(true);\n  }\n\n  return (\n  <div>\n    {!props.question ? <div>No questions <button onClick={props.callBackFunction}>Return to home</button></div> : \n    <div>\n      {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{len} correct.\n      <button onClick={props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, props.questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    <div>\n    {(minutes.toString()).padStart(2, \"0\")}:{(seconds.toString()).padStart(2, \"0\")}\n    </div>\n    </div>}\n    </div>} \n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}