{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [requested, setRequested] = useState(false);\n  const [question, setQuestion] = useState();\n  const [questions, setQuestions] = useState();\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState();\n  const [expiryTimestamp, setExpiryTimestamp] = useState();\n\n  if (!requested) {\n    axios({\n      method: 'get',\n      url: 'http://127.0.0.1:8000/api/'\n    }).then(response => {\n      const questionsTemp = response.data;\n      setQuestions(questionsTemp);\n      setQuestion(questionsTemp[0]);\n      setRequested(true);\n      console.log(questionsTemp[0]);\n      setLen(questionsTemp.length);\n    });\n  }\n\n  ;\n  console.log(questions);\n\n  const getExpiryTimeStamp = () => {\n    const totalTime = len * 10; //questions.length;\n\n    console.log(\"Length of questions is: \", questions);\n    const initTime = new Date();\n    initTime.setSeconds(initTime.getSeconds() + totalTime);\n    setExpiryTimestamp(initTime + totalTime);\n  };\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === len) {\n      setIsEndScreen(true);\n    }\n  }; //if (minutes === 0 && seconds === 0 && !isEndScreen) {\n  //  setIsEndScreen(true);\n  //}\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !question ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"You got \", correctAnswers, \"/\", len, \" correct.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 7\n          }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log(question);\n              checkAnswer(response, question.answer, questions.length);\n            },\n            children: response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 43\n          }, this))]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 5\n        }, this), \"Correct Answers: \", correctAnswers, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"77nobxqGonnuUk7TZ0a6jeRuExY=\", false, function () {\n  return [useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","useTimer","axios","Game","props","requested","setRequested","question","setQuestion","questions","setQuestions","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","isEndScreen","setIsEndScreen","len","setLen","expiryTimestamp","setExpiryTimestamp","method","url","then","response","questionsTemp","data","console","log","length","getExpiryTimeStamp","totalTime","initTime","Date","setSeconds","getSeconds","seconds","minutes","hours","days","isRunning","start","pause","resume","restart","onExpire","warn","checkAnswer","answer","newIndex","name","responses","map","id","toString","padStart"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport axios from 'axios';\n\nfunction Game(props) {\n  const [requested, setRequested] = useState(false);\n  const [question, setQuestion] = useState();\n  const [questions, setQuestions] = useState();\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState();\n  const [expiryTimestamp, setExpiryTimestamp] = useState();\n  if (!requested) {\n    axios({\n      method: 'get',\n      url: 'http://127.0.0.1:8000/api/'\n    }).then(response => {\n      const questionsTemp = response.data;\n      setQuestions(questionsTemp)\n      setQuestion(questionsTemp[0]);\n      setRequested(true);\n      console.log(questionsTemp[0]);\n      setLen(questionsTemp.length);\n    })};\n  console.log(questions)\n  const getExpiryTimeStamp = () => {\n    const totalTime = len*10//questions.length;\n    console.log(\"Length of questions is: \", questions);\n    const initTime = new Date();\n    initTime.setSeconds(initTime.getSeconds() + totalTime);\n    setExpiryTimestamp(initTime + totalTime);\n  }\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex+1])\n\n    \n    if (questionIndex+1 === len) {\n      setIsEndScreen(true)\n    }\n  }\n\n  //if (minutes === 0 && seconds === 0 && !isEndScreen) {\n  //  setIsEndScreen(true);\n  //}\n\n  return (\n  <div>\n    {!question ? <div>No questions</div> : \n    <div>\n      {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{len} correct.\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    <div>\n    {(minutes.toString()).padStart(2, \"0\")}:{(seconds.toString()).padStart(2, \"0\")}\n    </div>\n    </div>}\n    </div>} \n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}