{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      correctAnswers: 0,\n      questionIndex: 0,\n      question: this.props.questions[0],\n      isEndScreen: false,\n      len: this.props.questions.length,\n      time: {},\n      seconds: 5\n    };\n    this.timer = 0;\n\n    this.startTimer = () => {\n      if (this.timer === 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    };\n\n    this.secondsToTime = secs => {\n      let hours = Math.floor(secs / (60 * 60));\n      let divisor_for_minutes = secs % (60 * 60);\n      let minutes = Math.floor(divisor_for_minutes / 60);\n      let divisor_for_seconds = divisor_for_minutes % 60;\n      let seconds = Math.ceil(divisor_for_seconds);\n      let obj = {\n        h: hours,\n        m: minutes,\n        s: seconds\n      };\n      return obj;\n    };\n\n    this.checkAnswer = (response, answer) => {\n      console.log(response, answer, this.state.len);\n\n      if (response === answer) {\n        this.setState({\n          correctAnswers: this.state.correctAnswers + 1\n        });\n      }\n\n      var newIndex = this.state.questionIndex + 1;\n      this.setState({\n        questionIndex: newIndex,\n        question: this.props.questions[this.state.questionIndex + 1]\n      });\n\n      if (this.state.questionIndex + 1 === this.state.len) {\n        this.setState({\n          isEndScreen: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({\n      time: timeLeftVar\n    });\n    this.startTimer();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log(this.timer), this.state.isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"You got \", this.state.correctAnswers, \"/\", this.state.len, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.props.callBackFunction,\n          children: \"Return to home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }, this), this.state.question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log(this.state.question);\n              this.checkAnswer(response, this.state.question.answer, this.props.questions.length);\n            },\n            children: response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 54\n          }, this))]\n        }, this.state.question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 5\n        }, this), \"Correct Answers: \", this.state.correctAnswers, \"Time: \", this.timer, \"Fix the timer!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","Component","Game","state","correctAnswers","questionIndex","question","props","questions","isEndScreen","len","length","time","seconds","timer","startTimer","setInterval","countDown","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","h","m","s","checkAnswer","response","answer","console","log","setState","newIndex","componentDidMount","timeLeftVar","render","callBackFunction","name","responses","map","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nclass Game extends Component{\n  state = {correctAnswers: 0, questionIndex: 0, question : this.props.questions[0], isEndScreen:false, len: this.props.questions.length, time:{}, seconds:5}\n  \n  timer = 0;\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeftVar });\n    this.startTimer()\n  }\n\n  startTimer = () => {\n    if (this.timer === 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n     \n  secondsToTime = (secs) => {\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      h: hours,\n      m: minutes,\n      s: seconds\n    };\n    return obj;\n  }\n\n  checkAnswer = (response, answer) => {\n    console.log(response, answer, this.state.len)\n    if (response === answer) {   \n      this.setState({correctAnswers : this.state.correctAnswers + 1})           \n    }\n    var newIndex = this.state.questionIndex + 1;\n    this.setState({questionIndex: newIndex, question: this.props.questions[this.state.questionIndex+1]})\n    \n    if (this.state.questionIndex+1 === this.state.len) {\n      this.setState({isEndScreen: true})\n    }\n  }\n  \n  render() {\n  return (\n  <div>\n    {console.log(this.timer)}\n    {this.state.isEndScreen ? \n    <div>\n      You got {this.state.correctAnswers}/{this.state.len} correct.\n      <button onClick={this.props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      <div key={this.state.question.id}>\n      <p>{this.state.question.name}</p>\n      {this.state.question.responses.map(response => <button onClick={() => {console.log(this.state.question);this.checkAnswer(response, this.state.question.answer, this.props.questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {this.state.correctAnswers}\n    Time: {this.timer}\n    Fix the timer!\n    </div>}\n  </div>) }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}