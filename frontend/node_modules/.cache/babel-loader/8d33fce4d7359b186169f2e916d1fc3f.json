{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  let questions = [];\n  const [requested, setRequested] = useState(false);\n  const [question, setQuestion] = useState();\n\n  if (!requested) {\n    axios({\n      method: 'get',\n      url: 'http://127.0.0.1:8000/api/'\n    }).then(response => {\n      questions = response.data;\n      setQuestion(questions[0]);\n      setRequested(true);\n      console.log(questions[0]);\n      start();\n    });\n  }\n\n  ;\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === len) {\n      setIsEndScreen(true);\n    }\n  }; //if (minutes === 0 && seconds === 0 && !isEndScreen) {\n  //  setIsEndScreen(true);\n  //}\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !question ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"You got \", correctAnswers, \"/\", len, \" correct.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 7\n          }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log(question);\n              checkAnswer(response, question.answer, questions.length);\n            },\n            children: response\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 43\n          }, this))]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 5\n        }, this), \"Correct Answers: \", correctAnswers, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"6c+RQEyJfb3G04X+biY4Xr+ttCA=\", false, function () {\n  return [useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","useTimer","axios","Game","props","questions","requested","setRequested","question","setQuestion","method","url","then","response","data","console","log","start","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","isEndScreen","setIsEndScreen","seconds","minutes","hours","days","isRunning","pause","resume","restart","expiryTimestamp","onExpire","warn","checkAnswer","answer","len","newIndex","name","responses","map","length","id","toString","padStart"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport axios from 'axios';\n\nfunction Game(props) {\n  let questions = [];\n  const [requested, setRequested] = useState(false);\n  const [question, setQuestion] = useState();\n  if (!requested) {\n    axios({\n      method: 'get',\n      url: 'http://127.0.0.1:8000/api/'\n    }).then(response => {\n      questions = response.data;\n      setQuestion(questions[0]);\n      setRequested(true);\n      console.log(questions[0]);\n      start();\n    }) };\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex+1])\n\n    \n    if (questionIndex+1 === len) {\n      setIsEndScreen(true)\n    }\n  }\n\n  //if (minutes === 0 && seconds === 0 && !isEndScreen) {\n  //  setIsEndScreen(true);\n  //}\n\n  return (\n  <div>\n    {!question ? <div>No questions</div> : \n    <div>\n      {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{len} correct.\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    <div>\n    {(minutes.toString()).padStart(2, \"0\")}:{(seconds.toString()).padStart(2, \"0\")}\n    </div>\n    </div>}\n    </div>} \n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}