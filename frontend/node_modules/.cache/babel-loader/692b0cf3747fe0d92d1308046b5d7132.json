{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { useParams, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState(questions[0]);\n  const {\n    gameLink\n  } = useParams();\n  const requestStr = [\"http://localhost:8000/api/games/\", gameLink].join(\"\");\n  const [length, setLength] = useState(7);\n  const [username, setUsername] = useState(\"\");\n  const [isSendScreen, setIsSendScreen] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [expiryTime, setExpiryTime] = useState(0);\n  const initTime = new Date();\n  const prepTime = Date.parse(initTime);\n  const [players, setPlayers] = useState([]);\n  initTime.setSeconds(initTime.getSeconds() + length * 10);\n  const expiryTimestamp = initTime;\n  var gameExpiryD = new Date(0);\n  const [gameExpiry, setGameExpiry] = useState();\n\n  function sendAnswer() {\n    const sendDict = {\n      \"_id\": username,\n      \"score\": correctAnswers,\n      \"total\": questions.length,\n      \"game\": gameLink\n    };\n    console.log(\"reached\");\n    axios.post(\"http://localhost:8000/api/players/\", sendDict).then(res => {\n      if (res.data !== \"Name exists\") {\n        setIsEndScreen(true);\n        setIsSendScreen(false);\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (loading) {\n      axios.get(requestStr, {\n        id: gameLink\n      }).then(response => {\n        if (response.data !== null) {\n          gameExpiryD.setUTCMilliseconds(response.data.expiryTime);\n          console.log(\"gameExpiry is:\", gameExpiryD);\n          setQuestions(response.data.questions);\n          setQuestion(response.data.questions[0]);\n          setLength(response.data.questions.length);\n          setExpiryTime(response.data.expiryTime);\n        }\n      });\n      const requestStr2 = [\"http://localhost:8000/api/players/byGame/\", gameLink].join(\"\");\n      axios.get(requestStr2, {\n        game: gameLink\n      }).then(response => {\n        setPlayers(response.data);\n      });\n      start();\n    }\n  });\n  useEffect(() => {\n    if (username !== \"\") {\n      sendAnswer();\n    }\n  }, [isEndScreen]);\n  useEffect(() => {\n    setLoading(false);\n    console.log(players);\n  }, [players]);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(\"checking\");\n    console.log(response, answer, length, questionIndex);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n\n    if (newIndex === length) {\n      setIsSendScreen(true);\n      return;\n    }\n\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex + 1]);\n  };\n\n  if (minutes === 0 && seconds === 0 && !isSendScreen) {\n    setIsSendScreen(true);\n  } //<input value={username} onChange={(event) => setUsername(event.target.value)}/><button onClick={() => {setIsSetUp(true)}}>Submit</button>\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [props.point, !question && !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"No questions \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.callBackFunction,\n          children: \"Return to home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 32\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isSendScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: username,\n          onChange: event => setUsername(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendAnswer,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 107\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wText\",\n            children: [\"Answer recorded successfully. The final results will be published at \", gameExpiryD.toString(), \".\", console.log()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: props.callBackFunction,\n              children: \"Return to home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 24\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 22\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: expiryTime < prepTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wText\",\n              children: [console.log(expiryTime, prepTime), console.log(players.length), players.map(player => /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Player \", player._id, \" got \", player.score, \" out of \", player.total, \" in game \", player.game]\n              }, player._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 38\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: question.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 13\n              }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => {\n                  checkAnswer(response, question.answer);\n                },\n                children: response\n              }, response, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 49\n              }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 13\n              }, this), \"Correct Answers: \", correctAnswers, /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Time left: \", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"mnYoWtRIPECY2jrS+bREfY9LmtA=\", false, function () {\n  return [useParams, useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["axios","React","useState","useEffect","useTimer","useParams","Link","Game","props","questions","setQuestions","question","setQuestion","gameLink","requestStr","join","length","setLength","username","setUsername","isSendScreen","setIsSendScreen","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","isEndScreen","setIsEndScreen","loading","setLoading","expiryTime","setExpiryTime","initTime","Date","prepTime","parse","players","setPlayers","setSeconds","getSeconds","expiryTimestamp","gameExpiryD","gameExpiry","setGameExpiry","sendAnswer","sendDict","console","log","post","then","res","data","get","id","response","setUTCMilliseconds","requestStr2","game","start","seconds","minutes","hours","days","isRunning","pause","resume","restart","onExpire","warn","checkAnswer","answer","newIndex","point","callBackFunction","event","target","value","toString","map","player","_id","score","total","name","responses","padStart"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { useParams, Link } from 'react-router-dom'\n\nfunction Game(props) {\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState(questions[0]);\n  const { gameLink } = useParams();\n  const requestStr = [\"http://localhost:8000/api/games/\",gameLink].join(\"\");\n  const [length, setLength] = useState(7);\n  const [username, setUsername] = useState(\"\");\n  const [isSendScreen, setIsSendScreen] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [expiryTime, setExpiryTime] = useState(0);\n  const initTime = new Date();\n  const prepTime = Date.parse(initTime);\n  const [players, setPlayers] = useState([])\n  initTime.setSeconds(initTime.getSeconds() + length*10);\n  const expiryTimestamp = initTime;\n  var gameExpiryD = new Date(0);\n  const [gameExpiry, setGameExpiry] = useState()\n\n  \n  function sendAnswer() {\n    const sendDict = {\"_id\": username, \"score\": correctAnswers, \"total\":questions.length, \"game\":gameLink}\n    console.log(\"reached\")\n    axios.post(\"http://localhost:8000/api/players/\", sendDict).then(res => {\n      if (res.data !== \"Name exists\") {setIsEndScreen(true);setIsSendScreen(false);}\n    });\n  }\n\n  useEffect(() => {\n    if (loading) {\n    axios.get(requestStr, {id:gameLink}).then((response) => {\n\n    if (response.data !== null) {\n    gameExpiryD.setUTCMilliseconds(response.data.expiryTime);\n    console.log(\"gameExpiry is:\",gameExpiryD);\n    setQuestions(response.data.questions);\n    setQuestion(response.data.questions[0]);\n    setLength(response.data.questions.length);\n    setExpiryTime(response.data.expiryTime); }\n    });\n\n    const requestStr2 = [\"http://localhost:8000/api/players/byGame/\",gameLink].join(\"\");\n    axios.get(requestStr2, {game:gameLink}).then(response => {setPlayers(response.data);})\n    start();}})\n\n  useEffect(() => {if (username !== \"\") {sendAnswer();}}, [isEndScreen])\n  useEffect(() => {setLoading(false);console.log(players);}, [players])\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(\"checking\")\n    console.log(response, answer, length, questionIndex)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    if (newIndex === length) {\n      setIsSendScreen(true);\n      return\n    }\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex+1])\n  }\n\n  if (minutes === 0 && seconds === 0 && !isSendScreen) {\n    setIsSendScreen(true);\n  }\n\n  //<input value={username} onChange={(event) => setUsername(event.target.value)}/><button onClick={() => {setIsSetUp(true)}}>Submit</button>\n\n  return (\n  <div>\n    {props.point}\n    {(!question && !loading) ? <div>No questions <Link to=\"/\"><button onClick={props.callBackFunction}>Return to home</button></Link></div> : \n    <div>\n      {isSendScreen ? <div><input value={username} onChange={(event) => setUsername(event.target.value)}/><button onClick={sendAnswer}>Submit</button></div>: \n      <div>{isEndScreen ? \n        <div>\n        <div className=\"wText\">\n          Answer recorded successfully. The final results will be published at {gameExpiryD.toString()}. \n          {console.log()}\n          </div>\n          <Link to=\"/\"><button onClick={props.callBackFunction}>Return to home</button></Link>\n      </div> : \n      <div>\n          {loading ? <p>Loading...</p>: <div>\n            {(expiryTime < prepTime) ? <div className=\"wText\">\n              {console.log(expiryTime, prepTime)}\n              {console.log(players.length)}\n              {players.map(player => <p key={player._id}>Player {player._id} got {player.score} out of {player.total} in game {player.game}</p>)}\n            </div>: \n            <div>\n            <h2>{question.name}</h2>\n            {question.responses.map(response => <button key={response} type=\"button\" onClick={() => {checkAnswer(response, question.answer)}}>{response}</button>)}\n            <br/>\n            Correct Answers: {correctAnswers}\n            <h3>Time left: {(minutes.toString()).padStart(2, \"0\")}:{(seconds.toString()).padStart(2, \"0\")}</h3>\n            </div>}\n        </div>}\n          \n        </div>}</div>}\n    </div>} \n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}