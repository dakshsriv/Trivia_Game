{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[0]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState(props.questions.length);\n\n  checkAnswer = (response, answer) => {\n    console.log(response, answer, len);\n\n    if (response === answer) {\n      this.setState({\n        correctAnswers: correctAnswers + 1\n      });\n    }\n\n    var newIndex = questionIndex + 1;\n    this.setState({\n      questionIndex: newIndex,\n      question: props.questions[questionIndex + 1]\n    });\n\n    if (questionIndex + 1 === len) {\n      this.setState({\n        isEndScreen: true\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(this.timer), isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You got \", correctAnswers, \"/\", len, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.callBackFunction,\n        children: \"Return to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(question);\n            this.checkAnswer(response, question.answer, props.questions.length);\n          },\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 43\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), \"Correct Answers: \", correctAnswers, \"Time: \", this.timer, \"Fix the timer!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"q9MNBqww2xwTRvTw/tOz2nt8u/w=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","useTimer","Game","props","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","question","setQuestion","questions","isEndScreen","setIsEndScreen","len","setLen","length","checkAnswer","response","answer","console","log","setState","newIndex","timer","callBackFunction","name","responses","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACI,KAAK,CAACO,SAAN,CAAgB,CAAhB,CAAD,CAAxC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACc,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAACI,KAAK,CAACO,SAAN,CAAgBK,MAAjB,CAA9B;;AAEAC,EAAAA,WAAW,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsBC,MAAtB,EAA8BL,GAA9B;;AACA,QAAII,QAAQ,KAAKC,MAAjB,EAAyB;AACvB,WAAKG,QAAL,CAAc;AAACjB,QAAAA,cAAc,EAAGA,cAAc,GAAG;AAAnC,OAAd;AACD;;AACD,QAAIkB,QAAQ,GAAGhB,aAAa,GAAG,CAA/B;AACA,SAAKe,QAAL,CAAc;AAACf,MAAAA,aAAa,EAAEgB,QAAhB;AAA0Bd,MAAAA,QAAQ,EAAEL,KAAK,CAACO,SAAN,CAAgBJ,aAAa,GAAC,CAA9B;AAApC,KAAd;;AAEA,QAAIA,aAAa,GAAC,CAAd,KAAoBO,GAAxB,EAA6B;AAC3B,WAAKQ,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAE;AAAd,OAAd;AACD;AACF,GAXD;;AAaA,sBACA;AAAA,eACGQ,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAjB,CADH,EAEGZ,WAAW,gBACZ;AAAA,6BACWP,cADX,OAC4BS,GAD5B,4BAEE;AAAQ,QAAA,OAAO,EAAEV,KAAK,CAACqB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADY,gBAKd;AAAA,8BACI;AAAA,gCACA;AAAA,oBAAIhB,QAAQ,CAACiB;AAAb;AAAA;AAAA;AAAA;AAAA,gBADA,EAECjB,QAAQ,CAACkB,SAAT,CAAmBC,GAAnB,CAAuBV,QAAQ,iBAAI;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACE,YAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AAAsB,iBAAKQ,WAAL,CAAiBC,QAAjB,EAA2BT,QAAQ,CAACU,MAApC,EAA4Cf,KAAK,CAACO,SAAN,CAAgBK,MAA5D;AAAoE,WAAlH;AAAA,oBAAqHE;AAArH;AAAA;AAAA;AAAA;AAAA,gBAAnC,CAFD;AAAA,SAAUT,QAAQ,CAACoB,EAAnB;AAAA;AAAA;AAAA;AAAA,cADJ,eAKE;AAAA;AAAA;AAAA;AAAA,cALF,uBAMoBxB,cANpB,YAOS,KAAKmB,KAPd;AAAA;AAAA;AAAA;AAAA;AAAA,YAPA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAmBD;;GAvCQrB,I;;KAAAA,I;AAyCT,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\n\nfunction Game(props) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[0]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState(props.questions.length);\n\n  checkAnswer = (response, answer) => {\n    console.log(response, answer, len)\n    if (response === answer) {   \n      this.setState({correctAnswers : correctAnswers + 1})           \n    }\n    var newIndex = questionIndex + 1;\n    this.setState({questionIndex: newIndex, question: props.questions[questionIndex+1]})\n    \n    if (questionIndex+1 === len) {\n      this.setState({isEndScreen: true})\n    }\n  }\n  \n  return (\n  <div>\n    {console.log(this.timer)}\n    {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{len} correct.\n      <button onClick={props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);this.checkAnswer(response, question.answer, props.questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    Time: {this.timer}\n    Fix the timer!\n    </div>}\n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}