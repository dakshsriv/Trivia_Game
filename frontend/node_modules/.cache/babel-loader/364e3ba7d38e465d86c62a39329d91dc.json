{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  console.log(\"Category is: \", props.category);\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState(questions[0]);\n  const requestStr = [\"http://localhost:8000/api/\", props.category].join(\"\");\n  useEffect(() => {\n    axios.get(requestStr, {\n      category: props.category\n    }).then(response => {\n      console.log(response.data);\n      setQuestions(response.data);\n      setQuestion(response.data[0]);\n      setLoading(false);\n    });\n    start();\n  }, []);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const totalTime = props.questions * 10; //props.questions.length;\n\n  const initTime = new Date();\n  initTime.setSeconds(initTime.getSeconds() + totalTime);\n  const [expiryTimestamp, setExpiryTimestamp] = useState(initTime);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(\"checking\");\n    console.log(response, answer, questions.length, questionIndex);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n\n    if (newIndex === questions.length) {\n      setIsEndScreen(true);\n      return;\n    }\n\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex + 1]);\n  };\n\n  if (minutes === 0 && seconds === 0 && !isEndScreen) {\n    setIsEndScreen(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !question ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"No questions \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.callBackFunction,\n          children: \"Return to home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"You got \", correctAnswers, \"/\", questions.length, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.callBackFunction,\n          children: \"Return to home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 18\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 7\n            }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => {\n                checkAnswer(response, question.answer);\n              },\n              children: response\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 43\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 5\n          }, this), \"Correct Answers: \", correctAnswers, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"ociprpmS4tThpdY6L1Qbh8Xz/vw=\", false, function () {\n  return [useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["axios","React","useState","useEffect","useTimer","Link","Game","props","console","log","category","questions","setQuestions","question","setQuestion","requestStr","join","get","then","response","data","setLoading","start","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","isEndScreen","setIsEndScreen","loading","totalTime","initTime","Date","setSeconds","getSeconds","expiryTimestamp","setExpiryTimestamp","seconds","minutes","hours","days","isRunning","pause","resume","restart","onExpire","warn","checkAnswer","answer","length","newIndex","callBackFunction","name","responses","map","toString","padStart"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport {Link} from 'react-router-dom';\n\nfunction Game(props) {\n  console.log(\"Category is: \", props.category)\n\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState(questions[0]);\n  const requestStr = [\"http://localhost:8000/api/\",props.category].join(\"\")\n  useEffect(() => {axios.get(requestStr, {category:props.category}).then((response) => {console.log(response.data);setQuestions(response.data);setQuestion(response.data[0]);setLoading(false)});start()}, [])\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [loading, setLoading] = useState(true)\n  const totalTime = props.questions*10//props.questions.length;\n  const initTime = new Date();\n  initTime.setSeconds(initTime.getSeconds() + totalTime);\n  const [expiryTimestamp, setExpiryTimestamp] = useState(initTime);\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(\"checking\")\n    console.log(response, answer, questions.length, questionIndex)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    if (newIndex === questions.length) {\n      setIsEndScreen(true);\n      return\n    }\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex+1])\n  }\n\n  if (minutes === 0 && seconds === 0 && !isEndScreen) {\n    setIsEndScreen(true);\n  }\n\n  return (\n  <div>\n    {!question ? <div>No questions <Link to=\"/\"><button onClick={props.callBackFunction}>Return to home</button></Link></div> : \n    <div>\n      {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{questions.length} correct.\n      <button onClick={props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      {loading ? <p>Loading</p>: <div><div>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button type=\"button\" onClick={() => {checkAnswer(response, question.answer)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    <div>\n    {(minutes.toString()).padStart(2, \"0\")}:{(seconds.toString()).padStart(2, \"0\")}\n    </div></div>}\n      \n    </div>}\n    </div>} \n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}