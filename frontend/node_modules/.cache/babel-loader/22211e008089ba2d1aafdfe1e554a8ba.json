{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[0]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState(props.questions.length);\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === len) {\n      setIsEndScreen(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You got \", correctAnswers, \"/\", len, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.callBackFunction,\n        children: \"Return to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(question);\n            checkAnswer(response, question.answer, props.questions.length);\n          },\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 43\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this), \"Correct Answers: \", correctAnswers, \"Fix the timer!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"7/hWAr9HYKmYLMFxjwwHZue3Qd0=\", false, function () {\n  return [useTimer];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","useTimer","Game","props","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","question","setQuestion","questions","isEndScreen","setIsEndScreen","len","setLen","length","seconds","minutes","hours","days","isRunning","start","pause","resume","restart","expiryTimestamp","onExpire","console","warn","checkAnswer","response","answer","log","newIndex","callBackFunction","name","responses","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACI,KAAK,CAACO,SAAN,CAAgB,CAAhB,CAAD,CAAxC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACc,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAACI,KAAK,CAACO,SAAN,CAAgBK,MAAjB,CAA9B;AAEA,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,KAPI;AAQJC,IAAAA,MARI;AASJC,IAAAA;AATI,MAUFvB,QAAQ,CAAC;AACXwB,IAAAA,eADW;AAEXC,IAAAA,QAAQ,EAAE,MAAMC,OAAO,CAACC,IAAR,CAAa,iBAAb;AAFL,GAAD,CAVZ;;AAeA,QAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACxCJ,IAAAA,OAAO,CAACK,GAAR,CAAYF,QAAZ,EAAsBC,MAAtB,EAA8BlB,GAA9B;;AACA,QAAIiB,QAAQ,KAAKC,MAAjB,EAAyB;AACvB1B,MAAAA,iBAAiB,CAACD,cAAc,GAAC,CAAhB,CAAjB;AACD;;AACD,QAAI6B,QAAQ,GAAG3B,aAAa,GAAG,CAA/B;AACAC,IAAAA,gBAAgB,CAAC0B,QAAD,CAAhB;AACAxB,IAAAA,WAAW,CAACN,KAAK,CAACO,SAAN,CAAgBJ,aAAa,GAAC,CAA9B,CAAD,CAAX;;AAGA,QAAIA,aAAa,GAAC,CAAd,KAAoBO,GAAxB,EAA6B;AAC3BD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAbD;;AAeA,sBACA;AAAA,cACGD,WAAW,gBACZ;AAAA,6BACWP,cADX,OAC4BS,GAD5B,4BAEE;AAAQ,QAAA,OAAO,EAAEV,KAAK,CAAC+B,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADY,gBAKd;AAAA,8BACI;AAAA,gCACA;AAAA,oBAAI1B,QAAQ,CAAC2B;AAAb;AAAA;AAAA;AAAA;AAAA,gBADA,EAEC3B,QAAQ,CAAC4B,SAAT,CAAmBC,GAAnB,CAAuBP,QAAQ,iBAAI;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACH,YAAAA,OAAO,CAACK,GAAR,CAAYxB,QAAZ;AAAsBqB,YAAAA,WAAW,CAACC,QAAD,EAAWtB,QAAQ,CAACuB,MAApB,EAA4B5B,KAAK,CAACO,SAAN,CAAgBK,MAA5C,CAAX;AAA+D,WAA7G;AAAA,oBAAgHe;AAAhH;AAAA;AAAA;AAAA;AAAA,gBAAnC,CAFD;AAAA,SAAUtB,QAAQ,CAAC8B,EAAnB;AAAA;AAAA;AAAA;AAAA,cADJ,eAKE;AAAA;AAAA;AAAA;AAAA,cALF,uBAMoBlC,cANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA,UADA;AAiBD;;GAtDQF,I;UAiBHD,Q;;;KAjBGC,I;AAwDT,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\n\nfunction Game(props) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[0]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [len, setLen] = useState(props.questions.length);\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n  \n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, len)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex+1])\n\n    \n    if (questionIndex+1 === len) {\n      setIsEndScreen(true)\n    }\n  }\n  \n  return (\n  <div>\n    {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{len} correct.\n      <button onClick={props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, props.questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    Fix the timer!\n    </div>}\n  </div>) \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}