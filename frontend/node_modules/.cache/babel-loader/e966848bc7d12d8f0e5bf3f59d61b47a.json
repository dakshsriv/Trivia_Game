{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[questionIndex]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [timer, setTimer] = useState(props.questions.length * 4);\n  const [counter, setCounter] = useState(0);\n  const length = props.questions.length;\n  useEffect(timer => {\n    startTimer();\n  }, []);\n\n  const startTimer = () => {};\n\n  const countDown = () => {};\n\n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, length);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === length) {\n      setIsEndScreen(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(timer), isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You got \", correctAnswers, \"/\", length, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.callBackFunction,\n        children: \"Return to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(question);\n            checkAnswer(response, question.answer, props.questions.length);\n          },\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 43\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), \"Correct Answers: \", correctAnswers, \"Time: \", timer, \"Fix the timer!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Game, \"xozT88Uqk36OW8SnUGsTJANOw7Q=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","Game","props","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","question","setQuestion","questions","isEndScreen","setIsEndScreen","timer","setTimer","length","counter","setCounter","startTimer","countDown","checkAnswer","response","answer","console","log","newIndex","callBackFunction","name","responses","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACG,KAAK,CAACO,SAAN,CAAgBJ,aAAhB,CAAD,CAAxC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACG,KAAK,CAACO,SAAN,CAAgBK,MAAhB,GAAyB,CAA1B,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMe,MAAM,GAAGZ,KAAK,CAACO,SAAN,CAAgBK,MAA/B;AAEAd,EAAAA,SAAS,CAAGY,KAAD,IACX;AACGK,IAAAA,UAAU;AACZ,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMA,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM,CAEvB,CAFD;;AAIA,QAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsBC,MAAtB,EAA8BP,MAA9B;;AACA,QAAIM,QAAQ,KAAKC,MAAjB,EAAyB;AACvBjB,MAAAA,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAjB;AACD;;AACD,QAAIqB,QAAQ,GAAGnB,aAAa,GAAG,CAA/B;AACAC,IAAAA,gBAAgB,CAACkB,QAAD,CAAhB;AACAhB,IAAAA,WAAW,CAACN,KAAK,CAACO,SAAN,CAAgBJ,aAAa,GAAC,CAA9B,CAAD,CAAX;;AAEA,QAAIA,aAAa,GAAC,CAAd,KAAoBS,MAAxB,EAAgC;AAC9BH,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAZD;;AAcA,sBACA;AAAA,eACGW,OAAO,CAACC,GAAR,CAAYX,KAAZ,CADH,EAEGF,WAAW,gBACZ;AAAA,6BACWP,cADX,OAC4BW,MAD5B,4BAEE;AAAQ,QAAA,OAAO,EAAEZ,KAAK,CAACuB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADY,gBAKd;AAAA,8BACI;AAAA,gCACA;AAAA,oBAAIlB,QAAQ,CAACmB;AAAb;AAAA;AAAA;AAAA;AAAA,gBADA,EAECnB,QAAQ,CAACoB,SAAT,CAAmBC,GAAnB,CAAuBR,QAAQ,iBAAI;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACE,YAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AAAsBY,YAAAA,WAAW,CAACC,QAAD,EAAWb,QAAQ,CAACc,MAApB,EAA4BnB,KAAK,CAACO,SAAN,CAAgBK,MAA5C,CAAX;AAA+D,WAA7G;AAAA,oBAAgHM;AAAhH;AAAA;AAAA;AAAA;AAAA,gBAAnC,CAFD;AAAA,SAAUb,QAAQ,CAACsB,EAAnB;AAAA;AAAA;AAAA;AAAA,cADJ,eAKE;AAAA;AAAA;AAAA;AAAA,cALF,uBAMoB1B,cANpB,YAOSS,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA,YAPA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAmBD;;GAvDQX,I;;KAAAA,I;AAyDT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\n\nfunction Game(props) {\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[questionIndex]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [timer, setTimer] = useState(props.questions.length * 4);\n  const [counter, setCounter] = useState(0);\n  const length = props.questions.length;\n\n  useEffect ((timer) => \n  {\n     startTimer()\n  }, [])\n\n  const startTimer = () => {\n    \n  }\n\n  const countDown = () => {\n\n  }\n      \n  const checkAnswer = (response, answer) => {\n    console.log(response, answer, length)\n    if (response === answer) {              \n      setCorrectAnswers(correctAnswers + 1);\n    }\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex+1])\n    \n    if (questionIndex+1 === length) {\n      setIsEndScreen(true);\n    }\n  }\n\n  return (\n  <div>\n    {console.log(timer)}\n    {isEndScreen ? \n    <div>\n      You got {correctAnswers}/{length} correct.\n      <button onClick={props.callBackFunction}>Return to home</button>\n  </div> : \n  <div>\n      <div key={question.id}>\n      <p>{question.name}</p>\n      {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, props.questions.length)}}>{response}</button>)}\n      </div>\n    <br/>\n    Correct Answers: {correctAnswers}\n    Time: {timer}\n    Fix the timer!\n    </div>}\n  </div>)\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}