{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [question, setQuestion] = useState(props.questions[questionIndex]);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [time, setTime] = useState();\n  const [timer, setTimer] = useState(0);\n  const [seconds, setSeconds] = useState(props.questions[0].timer);\n  const length = props.questions.length;\n  useEffect(() => {\n    let timeLeftVar = secondsToTime(state.seconds);\n    setTime(timeLeftVar);\n    startTimer();\n  }, []);\n\n  function startTimer() {\n    if (timer === 0 && seconds > 0) {\n      timer = setInterval(countDown, 1000);\n    }\n  }\n\n  function countDown() {\n    let secondsMid = seconds - 1;\n    setTime(secondsToTime(seconds));\n    setSeconds(seconds);\n  } // Check if we're at zero.\n\n\n  if (secondsMid === 0) {\n    clearInterval(timer);\n  } //const [question, setQuestion] = useState(Object.keys(props.questions)[questionIndex]);\n  //const [questionData, setQuestionData] = useState(Object.values(props.questions)[questionIndex]);\n\n\n  function checkAnswer(response, answer) {\n    console.log(response, answer, length);\n\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n\n    var newIndex = questionIndex + 1;\n    setQuestionIndex(newIndex);\n    setQuestion(props.questions[questionIndex + 1]);\n\n    if (questionIndex + 1 === length) {\n      setIsEndScreen(true);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isEndScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You got \", correctAnswers, \"/\", length, \" correct.\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.callBackFunction,\n        children: \"Return to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), question.responses.map(response => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(question);\n            checkAnswer(response, question.answer, props.questions.length);\n          },\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 49\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), \"Correct Answers: \", correctAnswers, \"Time: \", seconds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"bThfFRue2DB8kUWyvajyUAN8fZw=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","useEffect","Game","props","correctAnswers","setCorrectAnswers","questionIndex","setQuestionIndex","question","setQuestion","questions","isEndScreen","setIsEndScreen","time","setTime","timer","setTimer","seconds","setSeconds","length","timeLeftVar","secondsToTime","state","startTimer","setInterval","countDown","secondsMid","clearInterval","checkAnswer","response","answer","console","log","newIndex","callBackFunction","name","responses","map","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\n\nfunction Game(props) {\n    const [correctAnswers, setCorrectAnswers] = useState(0);\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [question, setQuestion] = useState(props.questions[questionIndex]);\n    const [isEndScreen, setIsEndScreen] = useState(false);\n    const [time, setTime] = useState();\n    const [timer, setTimer] = useState(0);\n    const [seconds, setSeconds] = useState(props.questions[0].timer);\n    const length = props.questions.length;\n\n    useEffect (() => \n    {\n        let timeLeftVar = secondsToTime(state.seconds);\n        setTime(timeLeftVar);\n        startTimer()\n    }, [])\n\n    function startTimer() {\n        if (timer === 0 && seconds > 0) {\n          timer = setInterval(countDown, 1000);\n        }\n      }\n    \n    function countDown() {\n        let secondsMid = seconds - 1;\n        setTime(secondsToTime(seconds));\n        setSeconds(seconds)\n        }\n        \n        // Check if we're at zero.\n        if (secondsMid === 0) { \n        clearInterval(timer);\n        }\n    \n    \n    //const [question, setQuestion] = useState(Object.keys(props.questions)[questionIndex]);\n    //const [questionData, setQuestionData] = useState(Object.values(props.questions)[questionIndex]);\n      \n    function checkAnswer(response, answer){\n        console.log(response, answer, length)\n        if (response === answer) {              \n            setCorrectAnswers(correctAnswers + 1);\n        }\n        var newIndex = questionIndex + 1;\n        setQuestionIndex(newIndex);\n        setQuestion(props.questions[questionIndex+1])\n        \n        if (questionIndex+1 === length) {\n            setIsEndScreen(true);\n        }\n    }\n\n    return (\n    <div>\n        {isEndScreen ? \n        <div>\n            You got {correctAnswers}/{length} correct.\n            <button onClick={props.callBackFunction}>Return to home</button>\n        </div> : \n        <div>\n            <div key={question.id}>\n            <p>{question.name}</p>\n            {question.responses.map(response => <button onClick={() => {console.log(question);checkAnswer(response, question.answer, props.questions.length)}}>{response}</button>)}\n            </div>\n        <br/>\n        Correct Answers: {correctAnswers}\n        Time: {seconds}\n        </div>}\n    </div>)\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}