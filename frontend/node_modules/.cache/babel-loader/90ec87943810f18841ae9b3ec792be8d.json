{"ast":null,"code":"var _jsxFileName = \"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [correctAnswers, setCorrectAnswers] = useState(0); //const [question, setQuestion] = useState(Object.keys(props.questions)[questionIndex]);\n  //const [questionData, setQuestionData] = useState(Object.values(props.questions)[questionIndex]);\n\n  function checkAnswer(response, answer) {\n    if (response === answer) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), question.responses.map(response => {\n        /*#__PURE__*/\n        _jsxDEV(\"button\", {\n          onClick: () => checkAnswer(response, question.answser),\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 50\n        }, this);\n      })]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 44\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"Af2zuz+P0n6nNhlY109GT9+CFoo=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js"],"names":["React","useState","Game","props","correctAnswers","setCorrectAnswers","checkAnswer","response","answer","questions","map","question","name","responses","answser","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,CAAD,CAApD,CADiB,CAEjB;AACA;;AAEA,WAASK,WAAT,CAAqBC,QAArB,EAA+BC,MAA/B,EAAsC;AAClC,QAAID,QAAQ,KAAKC,MAAjB,EAAyB;AACrBH,MAAAA,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAjB;AACH;AACJ;;AACD,sBACA;AAAA,cACKD,KAAK,CAACM,SAAN,CAAgBC,GAAhB,CAAqBC,QAAD,iBAAc;AAAA,8BAC/B;AAAA,kBAAIA,QAAQ,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,cAD+B,EAE9BD,QAAQ,CAACE,SAAT,CAAmBH,GAAnB,CAAuBH,QAAQ,IAAI;AAAC;AAAA;AAAQ,UAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,QAAD,EAAWI,QAAQ,CAACG,OAApB,CAAlC;AAAA,oBAAiEP;AAAjE;AAAA;AAAA;AAAA;AAAA;AAAoF,OAAxH,CAF8B;AAAA,OAAUI,QAAQ,CAACI,EAAnB;AAAA;AAAA;AAAA;AAAA,YAAlC;AADL;AAAA;AAAA;AAAA;AAAA,UADA;AAOH;;GAjBQb,I;;KAAAA,I;AAmBT,eAAeA,IAAf","sourcesContent":["import React, { useState} from 'react';\n\nfunction Game(props) {\n    const [correctAnswers, setCorrectAnswers] = useState(0);\n    //const [question, setQuestion] = useState(Object.keys(props.questions)[questionIndex]);\n    //const [questionData, setQuestionData] = useState(Object.values(props.questions)[questionIndex]);\n\n    function checkAnswer(response, answer){\n        if (response === answer) {\n            setCorrectAnswers(correctAnswers + 1)\n        }\n    }\n    return (\n    <div>\n        {props.questions.map((question) => <div key={question.id}>\n            <p>{question.name}</p>\n            {question.responses.map(response => {<button onClick={() => checkAnswer(response, question.answser)}>{response}</button>})}\n            </div>)}\n    </div>)\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}