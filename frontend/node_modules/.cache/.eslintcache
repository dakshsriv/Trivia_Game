[{"/home/daksh/Projects/Trivia_Game/frontend/src/index.js":"1","/home/daksh/Projects/Trivia_Game/frontend/src/reportWebVitals.js":"2","/home/daksh/Projects/Trivia_Game/frontend/src/components/App.js":"3","/home/daksh/Projects/Trivia_Game/frontend/src/components/Create.js":"4","/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js":"5","/home/daksh/Projects/Trivia_Game/frontend/src/components/Test.js":"6"},{"size":645,"mtime":1651876126395,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1646587705010,"results":"9","hashOfConfig":"8"},{"size":2362,"mtime":1652036807457,"results":"10","hashOfConfig":"8"},{"size":2041,"mtime":1651529970530,"results":"11","hashOfConfig":"8"},{"size":4763,"mtime":1652135502924,"results":"12","hashOfConfig":"8"},{"size":179,"mtime":1648050053258,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ucksno",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/daksh/Projects/Trivia_Game/frontend/src/index.js",[],[],"/home/daksh/Projects/Trivia_Game/frontend/src/reportWebVitals.js",[],[],["34","35"],"/home/daksh/Projects/Trivia_Game/frontend/src/components/App.js",[],[],"/home/daksh/Projects/Trivia_Game/frontend/src/components/Create.js",[],[],"/home/daksh/Projects/Trivia_Game/frontend/src/components/Game.js",["36","37","38","39","40","41","42","43","44"],[],"import axios from 'axios';\nimport React, {useState, useEffect} from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport { useParams, Link } from 'react-router-dom'\n\nfunction Game(props) {\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestion] = useState(questions[0]);\n  const { gameLink } = useParams();\n  const requestStr = [\"http://localhost:8000/api/games/\",gameLink].join(\"\");\n  const [length, setLength] = useState(7);\n  const [username, setUsername] = useState(\"\");\n  const [isSendScreen, setIsSendScreen] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [isEndScreen, setIsEndScreen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [expiryTime, setExpiryTime] = useState(0);\n  const initTime = new Date();\n  const prepTime = Date.parse(initTime);\n  const [players, setPlayers] = useState([])\n  initTime.setSeconds(initTime.getSeconds() + length*10);\n  const expiryTimestamp = initTime;\n  var gameExpiryD = new Date(0);\n  const [gameExpiry, setGameExpiry] = useState()\n\n  \n  function sendAnswer() {\n    const sendDict = {\"_id\": username, \"score\": correctAnswers, \"total\":questions.length, \"game\":gameLink}\n    axios.post(\"http://localhost:8000/api/players/\", sendDict).then(res => {\n      if (res.data !== \"Name exists\") {setIsEndScreen(true);setIsSendScreen(false);}\n    });\n  }\n\n  useEffect(() => {\n    if (loading) {\n    axios.get(requestStr, {id:gameLink}).then((response) => {\n\n    if (response.data !== null) {\n    gameExpiryD.setUTCMilliseconds(response.data.expiryTime);\n    console.log(\"gameExpiry is:\",gameExpiryD.toString());\n    setQuestions(response.data.questions);\n    setQuestion(response.data.questions[0]);\n    setLength(response.data.questions.length);\n    setExpiryTime(response.data.expiryTime);\n    console.log(\"Received expiryTime is:\", response.data.expiryTime) }\n    });\n\n    const requestStr2 = [\"http://localhost:8000/api/players/byGame/\",gameLink].join(\"\");\n    axios.get(requestStr2, {game:gameLink}).then(response => {setPlayers(response.data);})\n    start();}})\n\n  useEffect(() => {if (username !== \"\") {sendAnswer();}}, [isEndScreen])\n  useEffect(() => {setLoading(false);console.log(players);}, [players])\n\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n\n  const checkAnswer = (response, answer) => {\n    console.log(\"checking\")\n    console.log(response, answer, length, questionIndex)\n    if (response === answer) {   \n      setCorrectAnswers(correctAnswers+1);          \n    }\n    var newIndex = questionIndex + 1;\n    if (newIndex === length) {\n      setIsSendScreen(true);\n      return\n    }\n    setQuestionIndex(newIndex);\n    setQuestion(questions[questionIndex+1])\n  }\n\n  if (minutes === 0 && seconds === 0 && !isSendScreen) {\n    setIsSendScreen(true);\n  }\n\n  //<input value={username} onChange={(event) => setUsername(event.target.value)}/><button onClick={() => {setIsSetUp(true)}}>Submit</button>\n\n  return (\n  <div>\n    {console.log()}\n    {props.point}\n    {(!question && !loading) ? <div>No questions <Link to=\"/\"><button onClick={props.callBackFunction}>Return to home</button></Link></div> : \n    <div>\n      {isSendScreen ? <div><input value={username} onChange={(event) => setUsername(event.target.value)}/><button onClick={sendAnswer}>Submit</button></div>: \n      <div>{isEndScreen ? \n        <div>\n        <div className=\"wText\">\n          {console.log(gameExpiryD.toString())}\n          Answer recorded successfully. The final results will be published at {gameExpiryD.toString()}. \n          {}\n          </div>\n          <Link to=\"/\"><button onClick={props.callBackFunction}>Return to home</button></Link>\n      </div> : \n      <div>\n          {loading ? <p>Loading...</p>: <div>\n            {(expiryTime < prepTime) ? <div className=\"wText\">\n              {console.log((expiryTime > prepTime))}\n              {players.map(player => <p key={player._id}>Player {player._id} got {player.score} out of {player.total} in game {player.game}</p>)}\n            </div>: \n            <div>\n            <h2>{question.name}</h2>\n            {question.responses.map(response => <button key={response} type=\"button\" onClick={() => {checkAnswer(response, question.answer)}}>{response}</button>)}\n            <br/>\n            Correct Answers: {correctAnswers}\n            <h3>Time left: {(minutes.toString()).padStart(2, \"0\")}:{(seconds.toString()).padStart(2, \"0\")}</h3>\n            </div>}\n        </div>}\n          \n        </div>}</div>}\n    </div>} \n  </div>) \n}\n\nexport default Game;","/home/daksh/Projects/Trivia_Game/frontend/src/components/Test.js",[],[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":25,"column":10,"nodeType":"51","messageId":"52","endLine":25,"endColumn":20},{"ruleId":"49","severity":1,"message":"53","line":25,"column":22,"nodeType":"51","messageId":"52","endLine":25,"endColumn":35},{"ruleId":"54","severity":1,"message":"55","line":53,"column":59,"nodeType":"56","endLine":53,"endColumn":72,"suggestions":"57"},{"ruleId":"49","severity":1,"message":"58","line":59,"column":5,"nodeType":"51","messageId":"52","endLine":59,"endColumn":10},{"ruleId":"49","severity":1,"message":"59","line":60,"column":5,"nodeType":"51","messageId":"52","endLine":60,"endColumn":9},{"ruleId":"49","severity":1,"message":"60","line":61,"column":5,"nodeType":"51","messageId":"52","endLine":61,"endColumn":14},{"ruleId":"49","severity":1,"message":"61","line":63,"column":5,"nodeType":"51","messageId":"52","endLine":63,"endColumn":10},{"ruleId":"49","severity":1,"message":"62","line":64,"column":5,"nodeType":"51","messageId":"52","endLine":64,"endColumn":11},{"ruleId":"49","severity":1,"message":"63","line":65,"column":5,"nodeType":"51","messageId":"52","endLine":65,"endColumn":12},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'gameExpiry' is assigned a value but never used.","Identifier","unusedVar","'setGameExpiry' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sendAnswer' and 'username'. Either include them or remove the dependency array.","ArrayExpression",["66"],"'hours' is assigned a value but never used.","'days' is assigned a value but never used.","'isRunning' is assigned a value but never used.","'pause' is assigned a value but never used.","'resume' is assigned a value but never used.","'restart' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [isEndScreen, sendAnswer, username]",{"range":"69","text":"70"},[2216,2229],"[isEndScreen, sendAnswer, username]"]